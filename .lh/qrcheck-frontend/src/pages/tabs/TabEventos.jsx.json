{
    "sourceFile": "qrcheck-frontend/src/pages/tabs/TabEventos.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754527167244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754527167244,
            "name": "Commit-0",
            "content": "// src/components/Tabs/TabEventos.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport {\r\n  listarEventos,\r\n  listarMeusEventos,\r\n  inscreverEmEvento\r\n} from '../../services/eventoService';\r\n\r\n// Mapeamento de status dos eventos\r\nconst STATUS_MAP = {\r\n  futuro:      { status: 'futuro',      texto: 'Em breve',          cor: 'bg-blue-100 text-blue-800' },\r\n  acontecendo: { status: 'acontecendo', texto: 'Acontecendo agora', cor: 'bg-green-100 text-green-800' },\r\n  finalizado:  { status: 'finalizado',  texto: 'Finalizado',        cor: 'bg-gray-100 text-gray-800' },\r\n};\r\n\r\nconst getStatusEvento = evento => {\r\n  const agora  = Date.now();\r\n  const inicio = new Date(evento.data_inicio).getTime();\r\n  const fim    = new Date(evento.data_fim).getTime();\r\n\r\n  if (agora < inicio)   return STATUS_MAP.futuro;\r\n  if (agora <= fim)     return STATUS_MAP.acontecendo;\r\n  return STATUS_MAP.finalizado;\r\n};\r\n\r\nconst formatarData = iso => new Date(iso).toLocaleDateString('pt-BR');\r\n\r\nexport default function TabEventos() {\r\n  const [eventos, setEventos]         = useState([]);\r\n  const [meusEventos, setMeusEventos] = useState([]);\r\n  const [loading, setLoading]         = useState(false);\r\n  const [error, setError]             = useState('');\r\n  const [activeTab, setActiveTab]     = useState('disponiveis');\r\n\r\n  const loadData = useCallback(async () => {\r\n    setError('');\r\n    setLoading(true);\r\n    try {\r\n      const [evs, myEvs] = await Promise.all([\r\n        listarEventos(),\r\n        listarMeusEventos()\r\n      ]);\r\n      setEventos(evs);\r\n      setMeusEventos(myEvs);\r\n    } catch (err) {\r\n      console.error('Erro ao carregar eventos:', err);\r\n      setError(err.message || 'Falha ao carregar eventos');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [loadData]);\r\n\r\n  const handleInscrever = useCallback(async eventoId => {\r\n    try {\r\n      await inscreverEmEvento(eventoId);\r\n      await loadData();\r\n      alert('Inscrição realizada com sucesso!');\r\n    } catch (err) {\r\n      console.error('Erro na inscrição:', err);\r\n      if (err.status === 409) {\r\n        alert('Você já está inscrito neste evento!');\r\n      } else {\r\n        alert('Erro ao realizar inscrição. Tente novamente.');\r\n      }\r\n    }\r\n  }, [loadData]);\r\n\r\n  const disponiveis = useMemo(\r\n    () => eventos.map(e => ({ ...e, statusInfo: getStatusEvento(e) })),\r\n    [eventos]\r\n  );\r\n  const meus = useMemo(\r\n    () => meusEventos.map(e => ({ ...e, statusInfo: getStatusEvento(e) })),\r\n    [meusEventos]\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-[300px]\">\r\n        <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-green-600\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-6 text-center\">\r\n        <p className=\"text-red-600 font-semibold mb-4\">{error}</p>\r\n        <button\r\n          onClick={loadData}\r\n          className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\"\r\n        >\r\n          Tentar Novamente\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const renderCard = (evento, alreadyRegistered) => {\r\n    const { statusInfo } = evento;\r\n    const podeInscrever = evento.inscricoes_abertas && statusInfo.status !== 'finalizado';\r\n\r\n    return (\r\n      <div\r\n        key={evento.id_public}\r\n        className=\"bg-white rounded-lg shadow overflow-hidden border hover:shadow-lg transition\"\r\n      >\r\n        <div className=\"p-6 flex flex-col h-full\">\r\n          <div className=\"flex justify-between items-start mb-4\">\r\n            <h3 className=\"text-xl font-bold text-gray-800 line-clamp-2\">\r\n              {evento.nome}\r\n            </h3>\r\n            <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusInfo.cor}`}>\r\n              {statusInfo.texto}\r\n            </span>\r\n          </div>\r\n\r\n          <p className=\"text-sm text-gray-600 mb-2\">\r\n            {formatarData(evento.data_inicio)} – {formatarData(evento.data_fim)}\r\n          </p>\r\n          <p className=\"text-gray-600 text-sm line-clamp-3 mb-4\">{evento.descricao}</p>\r\n\r\n          <div className=\"mt-auto flex justify-between items-center\">\r\n            {alreadyRegistered ? (\r\n              <span className=\"text-green-600 font-medium text-sm flex items-center\">\r\n                <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0...\" />\r\n                </svg>\r\n                Inscrito\r\n              </span>\r\n            ) : (\r\n              <button\r\n                onClick={() => handleInscrever(evento.id_public)}\r\n                disabled={!podeInscrever}\r\n                className={`px-4 py-2 rounded font-medium text-sm ${\r\n                  podeInscrever\r\n                    ? 'bg-green-600 text-white hover:bg-green-700'\r\n                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n                }`}\r\n              >\r\n                {podeInscrever ? 'Inscrever-se' : 'Inscrições Fechadas'}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-6\">\r\n      <header className=\"text-center mb-8\">\r\n        <h2 className=\"text-3xl font-bold text-gray-800 mb-2\">Eventos</h2>\r\n        <p className=\"text-gray-600\">Descubra eventos futuros e gerencie suas inscrições</p>\r\n      </header>\r\n\r\n      <div className=\"flex justify-center mb-8 space-x-2\">\r\n        <button\r\n          onClick={() => setActiveTab('disponiveis')}\r\n          className={`px-6 py-2 rounded ${activeTab === 'disponiveis'\r\n            ? 'bg-white text-green-600 shadow'\r\n            : 'text-gray-600 hover:text-gray-800'}`}\r\n        >\r\n          Disponíveis ({disponiveis.length})\r\n        </button>\r\n        <button\r\n          onClick={() => setActiveTab('meus')}\r\n          className={`px-6 py-2 rounded ${activeTab === 'meus'\r\n            ? 'bg-white text-green-600 shadow'\r\n            : 'text-gray-600 hover:text-gray-800'}`}\r\n        >\r\n          Meus Eventos ({meus.length})\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {activeTab === 'disponiveis'\r\n          ? disponiveis.map(e => renderCard(e, false))\r\n          : meus.map(e => renderCard(e, true))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}