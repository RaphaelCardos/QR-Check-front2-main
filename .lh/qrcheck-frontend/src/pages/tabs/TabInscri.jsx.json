{
    "sourceFile": "qrcheck-frontend/src/pages/tabs/TabInscri.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754527037936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754527037935,
            "name": "Commit-0",
            "content": "// src/components/Tabs/TabInscri.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { listarTodasInscricoes } from '../../services/eventoService';\r\n\r\n// Mapeamento de status\r\nconst STATUS_MAP = {\r\n  futuro:    { status: 'futuro',    texto: 'Em breve',           cor: 'bg-blue-100 text-blue-800',  icon: '‚è∞' },\r\n  acontecendo: { status: 'acontecendo', texto: 'Acontecendo agora', cor: 'bg-green-100 text-green-800', icon: 'üéâ' },\r\n  passado:   { status: 'passado',   texto: 'Finalizado',        cor: 'bg-gray-100 text-gray-800',  icon: '‚úÖ' },\r\n};\r\n\r\nconst getStatusEvento = evento => {\r\n  const agora      = Date.now();\r\n  const inicioMs   = new Date(evento.data_inicio).getTime();\r\n  const fimMs      = new Date(evento.data_fim).getTime();\r\n  if (agora < inicioMs)     return STATUS_MAP.futuro;\r\n  if (agora <= fimMs)       return STATUS_MAP.acontecendo;\r\n  return STATUS_MAP.passado;\r\n};\r\n\r\nconst formatarData = iso => new Date(iso).toLocaleDateString('pt-BR');\r\n\r\nexport default function TabInscri() {\r\n  const [inscricoes, setInscricoes] = useState([]);\r\n  const [loading, setLoading]       = useState(false);\r\n  const [error, setError]           = useState('');\r\n  const [filter, setFilter]         = useState('todos'); // 'todos' | 'futuro' | 'acontecendo' | 'passado'\r\n\r\n  const loadInscricoes = useCallback(async () => {\r\n    setError('');\r\n    setLoading(true);\r\n    try {\r\n      const data = await listarTodasInscricoes();\r\n      setInscricoes(data);\r\n    } catch (err) {\r\n      console.error('Erro ao carregar inscri√ß√µes:', err);\r\n      setError(err.message || 'Falha ao carregar inscri√ß√µes');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadInscricoes();\r\n  }, [loadInscricoes]);\r\n\r\n  // Inscri√ß√µes filtradas\r\n  const inscricoesFiltradas = useMemo(() => {\r\n    if (filter === 'todos') return inscricoes;\r\n    return inscricoes.filter(e => getStatusEvento(e).status === filter);\r\n  }, [inscricoes, filter]);\r\n\r\n  // Contadores para os filtros\r\n  const contadores = useMemo(() => ({\r\n    todos:        inscricoes.length,\r\n    futuros:      inscricoes.filter(e => getStatusEvento(e).status === 'futuro').length,\r\n    acontecendo: inscricoes.filter(e => getStatusEvento(e).status === 'acontecendo').length,\r\n    passados:    inscricoes.filter(e => getStatusEvento(e).status === 'passado').length,\r\n  }), [inscricoes]);\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-[300px]\">\r\n        <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-green-600\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-6 text-center\">\r\n        <p className=\"text-red-600 font-semibold mb-4\">{error}</p>\r\n        <button\r\n          onClick={loadInscricoes}\r\n          className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\"\r\n        >\r\n          Tentar Novamente\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-6\">\r\n      <header className=\"text-center mb-8\">\r\n        <h2 className=\"text-3xl font-bold text-gray-800 mb-2\">Minhas Inscri√ß√µes</h2>\r\n        <p className=\"text-gray-600\">Hist√≥rico de eventos em que voc√™ se inscreveu</p>\r\n      </header>\r\n\r\n      {/* Filtros */}\r\n      <div className=\"flex justify-center mb-8 space-x-2\">\r\n        {['todos','futuro','acontecendo','passado'].map(key => (\r\n          <button\r\n            key={key}\r\n            onClick={() => setFilter(key)}\r\n            className={`px-4 py-2 rounded-md font-medium transition ${filter === key\r\n              ? 'bg-white text-green-600 shadow'\r\n              : 'text-gray-600 hover:text-gray-800'}`}\r\n          >\r\n            {key === 'todos' ? `Todos (${contadores.todos})`\r\n              : key === 'futuro' ? `Futuros (${contadores.futuros})`\r\n              : key === 'acontecendo' ? `Acontecendo (${contadores.acontecendo})`\r\n              : `Passados (${contadores.passados})`}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Lista de inscri√ß√µes */}\r\n      {inscricoesFiltradas.length === 0 ? (\r\n        <div className=\"col-span-full text-center py-12\">\r\n          <p className=\"text-gray-500\">\r\n            {filter === 'todos'\r\n              ? 'Voc√™ ainda n√£o se inscreveu em nenhum evento.'\r\n              : 'Nenhum evento com esse status.'}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n          {inscricoesFiltradas.map(evento => {\r\n            const { status, texto, cor, icon } = getStatusEvento(evento);\r\n            return (\r\n              <div\r\n                key={evento.id_public}\r\n                className={`bg-white rounded-lg shadow overflow-hidden border transition hover:shadow-lg ${\r\n                  status === 'acontecendo' \r\n                    ? 'border-green-300 ring-2 ring-green-100' \r\n                    : status === 'futuro' \r\n                      ? 'border-blue-300' \r\n                      : 'border-gray-200'}`}\r\n              >\r\n                <div className=\"p-6 flex flex-col h-full\">\r\n                  <header className=\"flex justify-between items-start mb-4\">\r\n                    <h3 className=\"text-xl font-bold text-gray-800 line-clamp-2\">{evento.nome}</h3>\r\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${cor}`}>\r\n                      <span className=\"mr-1\">{icon}</span> {texto}\r\n                    </span>\r\n                  </header>\r\n                  <div className=\"flex-1\">\r\n                    <p className=\"text-sm text-gray-600 mb-2\">\r\n                      {formatarData(evento.data_inicio)} ‚Äì {formatarData(evento.data_fim)}\r\n                    </p>\r\n                    <p className=\"text-gray-600 text-sm line-clamp-3\">{evento.descricao}</p>\r\n                  </div>\r\n                  <footer className=\"mt-4 flex justify-between items-center\">\r\n                    <span className=\"text-green-600 text-sm font-medium flex items-center\">\r\n                      <svg className=\"w-4 h-4 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1...\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Inscrito\r\n                    </span>\r\n                    {status === 'acontecendo' && (\r\n                      <span className=\"text-green-600 text-sm animate-pulse\">Acontecendo agora</span>\r\n                    )}\r\n                  </footer>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}