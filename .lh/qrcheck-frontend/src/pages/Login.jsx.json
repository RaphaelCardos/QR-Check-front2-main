{
    "sourceFile": "qrcheck-frontend/src/pages/Login.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754529001408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754569200756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { Link, useNavigate } from \"react-router-dom\";\r\n import Footer from \"../components/Footer\";\r\n import pattern from \"../assets/pattern.png\";\r\n import logo from \"@/assets/logo.svg\";\r\n-import api from \"../services/api\";\r\n+import { login } from \"../services/authService\";\r\n \r\n export default function Login() {\r\n   const navigate = useNavigate();\r\n   const [email, setEmail]       = useState(\"\");\r\n@@ -17,22 +17,11 @@\n     e.preventDefault();\r\n     setError(\"\");\r\n     setLoading(true);\r\n \r\n-    // construir form-urlencoded\r\n-    const form = new URLSearchParams();\r\n-    form.append(\"username\", email);\r\n-    form.append(\"password\", password);\r\n-\r\n     try {\r\n-      const { data } = await api.post(\r\n-        \"/auth/token\",\r\n-        form,\r\n-        { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n-      );\r\n-\r\n-      // salva o JWT e redireciona\r\n-      localStorage.setItem(\"access_token\", data.access_token);\r\n+      // chama o login do authService, que já armazena os tokens\r\n+      await login(email, password);\r\n       navigate(\"/profile\");\r\n     } catch (err) {\r\n       console.error(\"Login falhou:\", err.response?.data || err.message);\r\n       setError(\"E-mail ou senha inválidos\");\r\n@@ -51,10 +40,10 @@\n         />\r\n       </div>\r\n \r\n       {/* Conteúdo */}\r\n-      <div className=\"flex flex-1 items-center bg-white justify-center\">\r\n-        <div className=\"bg-white p-6 md:p-8 rounded-xl shadow-lg w-full max-w-sm z-20\">\r\n+      <div className=\"flex flex-1 items-center justify-center z-20\">\r\n+        <div className=\"bg-white p-6 md:p-8 rounded-xl shadow-lg w-full max-w-sm\">\r\n           <div className=\"flex justify-center mb-6\">\r\n             <img src={logo} alt=\"QRCheck Logo\" className=\"h-8 md:h-10\" />\r\n           </div>\r\n \r\n"
                }
            ],
            "date": 1754529001408,
            "name": "Commit-0",
            "content": "// src/pages/Login.jsx\r\nimport React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Footer from \"../components/Footer\";\r\nimport pattern from \"../assets/pattern.png\";\r\nimport logo from \"@/assets/logo.svg\";\r\nimport api from \"../services/api\";\r\n\r\nexport default function Login() {\r\n  const navigate = useNavigate();\r\n  const [email, setEmail]       = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading]   = useState(false);\r\n  const [error, setError]       = useState(\"\");\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setLoading(true);\r\n\r\n    // construir form-urlencoded\r\n    const form = new URLSearchParams();\r\n    form.append(\"username\", email);\r\n    form.append(\"password\", password);\r\n\r\n    try {\r\n      const { data } = await api.post(\r\n        \"/auth/token\",\r\n        form,\r\n        { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n      );\r\n\r\n      // salva o JWT e redireciona\r\n      localStorage.setItem(\"access_token\", data.access_token);\r\n      navigate(\"/profile\");\r\n    } catch (err) {\r\n      console.error(\"Login falhou:\", err.response?.data || err.message);\r\n      setError(\"E-mail ou senha inválidos\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col bg-white relative\">\r\n      {/* Fundo com padrão */}\r\n      <div className=\"absolute inset-0 z-0\">\r\n        <div\r\n          className=\"w-full h-full opacity-90 bg-repeat-y bg-center bg-cover\"\r\n          style={{ backgroundImage: `url(${pattern})` }}\r\n        />\r\n      </div>\r\n\r\n      {/* Conteúdo */}\r\n      <div className=\"flex flex-1 items-center bg-white justify-center\">\r\n        <div className=\"bg-white p-6 md:p-8 rounded-xl shadow-lg w-full max-w-sm z-20\">\r\n          <div className=\"flex justify-center mb-6\">\r\n            <img src={logo} alt=\"QRCheck Logo\" className=\"h-8 md:h-10\" />\r\n          </div>\r\n\r\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n            {error && (\r\n              <p className=\"text-red-600 text-center text-sm\">{error}</p>\r\n            )}\r\n\r\n            <div>\r\n              <label className=\"block text-sm mb-1\">E-mail</label>\r\n              <input\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={e => setEmail(e.target.value)}\r\n                placeholder=\"seu@exemplo.com\"\r\n                required\r\n                className=\"w-full px-4 py-2 rounded bg-green-100 focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm mb-1\">Senha</label>\r\n              <input\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={e => setPassword(e.target.value)}\r\n                placeholder=\"••••••••\"\r\n                required\r\n                className=\"w-full px-4 py-2 rounded bg-green-100 focus:outline-none focus:ring-2 focus:ring-green-500\"\r\n              />\r\n            </div>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className={`w-full bg-green-500 text-white py-2 rounded font-bold transition ${\r\n                loading ? \"opacity-50 cursor-not-allowed\" : \"hover:bg-green-600\"\r\n              }`}\r\n            >\r\n              {loading ? \"Entrando...\" : \"Entrar\"}\r\n            </button>\r\n          </form>\r\n\r\n          <div className=\"mt-4 text-center\">\r\n            <p className=\"text-sm\">\r\n              Não tem uma conta?{\" \"}\r\n              <Link\r\n                to=\"/register\"\r\n                className=\"text-green-600 hover:underline font-semibold\"\r\n              >\r\n                Criar conta\r\n              </Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}