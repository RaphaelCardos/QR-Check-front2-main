{
    "sourceFile": "qrcheck-frontend/src/services/participanteService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1754530426177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754530686507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n // src/services/participanteService.js\r\n import api from './api';\r\n \r\n export const registerParticipante = async (participanteData) => {\r\n-  // Monta o payload conforme o backend espera\r\n   const payload = {\r\n     nome: participanteData.nome,\r\n     email: participanteData.email,\r\n     senha: participanteData.senha,\r\n@@ -13,54 +12,34 @@\n     necessidades_especificas: participanteData.necessidades || []\r\n   };\r\n \r\n   try {\r\n-    // Dispara o request\r\n     const response = await api.post('/admin/participantes/cadastro', payload);\r\n-\r\n-    // Se vier token, armazena\r\n     if (response.data.access_token) {\r\n       localStorage.setItem('access_token', response.data.access_token);\r\n     }\r\n+    return response.data;\r\n \r\n-    return response.data;\r\n   } catch (error) {\r\n-    // Log completo do erro e do corpo retornado pelo backend\r\n-    console.error('❌ Erro no serviço registerParticipante:', {\r\n+    console.error('❌ Erro registerParticipante:', {\r\n       status: error.response?.status,\r\n-      message: error.message,\r\n       responseData: error.response?.data\r\n     });\r\n \r\n-    // Se for erro de validação (422), extrai os field errors\r\n-    if (error.response?.status === 422) {\r\n-      const detail = Array.isArray(error.response.data.detail)\r\n-        ? error.response.data.detail\r\n-        : [];\r\n+    // Só tenta mapear fieldErrors se for 422 e detail for array\r\n+    if (error.response?.status === 422 && Array.isArray(error.response.data.detail)) {\r\n+      const fieldErrors = error.response.data.detail.reduce((acc, errItem) => {\r\n+        // checa se errItem.loc existe e é array longo >=2\r\n+        if (Array.isArray(errItem.loc) && errItem.loc.length >= 2) {\r\n+          const field = errItem.loc[1];       // e.g. [\"body\",\"email\"] → \"email\"\r\n+          acc[field] = errItem.msg || errItem.message || 'Erro de validação';\r\n+        }\r\n+        return acc;\r\n+      }, {});\r\n \r\n-      // Mapeia cada erro para { field, message }\r\n-      const fieldErrors = detail.map(err => ({\r\n-        field:   err.loc[1],  // por ex. [\"body\",\"email\"] → \"email\"\r\n-        message: err.msg\r\n-      }));\r\n-\r\n-      // Lança novamente incluindo fieldErrors, para o componente capturar\r\n+      // lança com fieldErrors\r\n       throw { ...error, fieldErrors };\r\n     }\r\n \r\n-    // Para outros erros, apenas relança\r\n     throw error;\r\n   }\r\n };\r\n-\r\n-// Função para buscar o perfil do participante autenticado\r\n-export const getParticipantePerfil = async () => {\r\n-  const response = await api.get('/meu-perfil');\r\n-  return response.data;\r\n-};\r\n-\r\n-// Outras funções do serviço (retornando sempre response.data)\r\n-export const getParticipante = id =>\r\n-  api.get(`/participantes/${id}`).then(res => res.data);\r\n-\r\n-export const updateParticipante = (id, data) =>\r\n-  api.patch(`/participantes/${id}`, data).then(res => res.data);\r\n"
                },
                {
                    "date": 1754531061752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // src/services/participanteService.js\r\n import api from './api';\r\n \r\n+// ── Cadastro de participante ───────────────────────────────────────────────\r\n export const registerParticipante = async (participanteData) => {\r\n   const payload = {\r\n     nome: participanteData.nome,\r\n     email: participanteData.email,\r\n@@ -24,22 +25,36 @@\n       status: error.response?.status,\r\n       responseData: error.response?.data\r\n     });\r\n \r\n-    // Só tenta mapear fieldErrors se for 422 e detail for array\r\n     if (error.response?.status === 422 && Array.isArray(error.response.data.detail)) {\r\n       const fieldErrors = error.response.data.detail.reduce((acc, errItem) => {\r\n-        // checa se errItem.loc existe e é array longo >=2\r\n         if (Array.isArray(errItem.loc) && errItem.loc.length >= 2) {\r\n-          const field = errItem.loc[1];       // e.g. [\"body\",\"email\"] → \"email\"\r\n+          const field = errItem.loc[1];  // e.g. ['body','email'] → 'email'\r\n           acc[field] = errItem.msg || errItem.message || 'Erro de validação';\r\n         }\r\n         return acc;\r\n       }, {});\r\n-\r\n-      // lança com fieldErrors\r\n       throw { ...error, fieldErrors };\r\n     }\r\n \r\n     throw error;\r\n   }\r\n };\r\n+\r\n+// ── Busca perfil do participante autenticado ───────────────────────────────\r\n+export const getParticipantePerfil = async () => {\r\n+  const response = await api.get('/meu-perfil');\r\n+  return response.data;\r\n+};\r\n+\r\n+// ── Busca um participante por ID (admin) ──────────────────────────────────\r\n+export const getParticipante = async (id) => {\r\n+  const response = await api.get(`/participantes/${id}`);\r\n+  return response.data;\r\n+};\r\n+\r\n+// ── Atualiza um participante por ID (admin) ───────────────────────────────\r\n+export const updateParticipante = async (id, data) => {\r\n+  const response = await api.patch(`/participantes/${id}`, data);\r\n+  return response.data;\r\n+};\r\n"
                },
                {
                    "date": 1754531995053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n // ── Cadastro de participante ───────────────────────────────────────────────\r\n export const registerParticipante = async (participanteData) => {\r\n   const payload = {\r\n     nome: participanteData.nome,\r\n+    sobrenome: participanteData.sobrenome,     // ← adicionado\r\n     email: participanteData.email,\r\n     senha: participanteData.senha,\r\n     cpf: participanteData.cpf.replace(/\\D/g, ''),\r\n     data_nasc: participanteData.nascimento,\r\n@@ -28,9 +29,9 @@\n \r\n     if (error.response?.status === 422 && Array.isArray(error.response.data.detail)) {\r\n       const fieldErrors = error.response.data.detail.reduce((acc, errItem) => {\r\n         if (Array.isArray(errItem.loc) && errItem.loc.length >= 2) {\r\n-          const field = errItem.loc[1];  // e.g. ['body','email'] → 'email'\r\n+          const field = errItem.loc[1];  // e.g. ['body','sobrenome'] → 'sobrenome'\r\n           acc[field] = errItem.msg || errItem.message || 'Erro de validação';\r\n         }\r\n         return acc;\r\n       }, {});\r\n"
                },
                {
                    "date": 1754532127084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n // src/services/participanteService.js\r\n import api from './api';\r\n \r\n-// ── Cadastro de participante ───────────────────────────────────────────────\r\n export const registerParticipante = async (participanteData) => {\r\n   const payload = {\r\n     nome: participanteData.nome,\r\n-    sobrenome: participanteData.sobrenome,     // ← adicionado\r\n+    sobrenome: participanteData.sobrenome,\r\n     email: participanteData.email,\r\n     senha: participanteData.senha,\r\n     cpf: participanteData.cpf.replace(/\\D/g, ''),\r\n     data_nasc: participanteData.nascimento,\r\n@@ -21,17 +20,24 @@\n     }\r\n     return response.data;\r\n \r\n   } catch (error) {\r\n-    console.error('❌ Erro registerParticipante:', {\r\n-      status: error.response?.status,\r\n-      responseData: error.response?.data\r\n-    });\r\n+    const { status, data } = error.response || {};\r\n+    console.error('❌ Erro registerParticipante: status', status);\r\n+    \r\n+    if (data?.detail) {\r\n+      console.error('❌ Detalhes do validation error:');\r\n+      data.detail.forEach((d, i) => {\r\n+        console.error(`  [${i}] loc=${JSON.stringify(d.loc)}, msg=\"${d.msg}\"`);\r\n+      });\r\n+    } else {\r\n+      console.error('❌ responseData:', data);\r\n+    }\r\n \r\n-    if (error.response?.status === 422 && Array.isArray(error.response.data.detail)) {\r\n-      const fieldErrors = error.response.data.detail.reduce((acc, errItem) => {\r\n+    if (status === 422 && Array.isArray(data.detail)) {\r\n+      const fieldErrors = data.detail.reduce((acc, errItem) => {\r\n         if (Array.isArray(errItem.loc) && errItem.loc.length >= 2) {\r\n-          const field = errItem.loc[1];  // e.g. ['body','sobrenome'] → 'sobrenome'\r\n+          const field = errItem.loc[1];\r\n           acc[field] = errItem.msg || errItem.message || 'Erro de validação';\r\n         }\r\n         return acc;\r\n       }, {});\r\n@@ -41,8 +47,9 @@\n     throw error;\r\n   }\r\n };\r\n \r\n+\r\n // ── Busca perfil do participante autenticado ───────────────────────────────\r\n export const getParticipantePerfil = async () => {\r\n   const response = await api.get('/meu-perfil');\r\n   return response.data;\r\n"
                },
                {
                    "date": 1754532246334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n // src/services/participanteService.js\r\n import api from './api';\r\n \r\n+// ── Cadastro de participante ───────────────────────────────────────────────\r\n export const registerParticipante = async (participanteData) => {\r\n   const payload = {\r\n     nome: participanteData.nome,\r\n-    sobrenome: participanteData.sobrenome,\r\n+    sobrenome: participanteData.sobrenome,       // obrigatório\r\n     email: participanteData.email,\r\n     senha: participanteData.senha,\r\n     cpf: participanteData.cpf.replace(/\\D/g, ''),\r\n     data_nasc: participanteData.nascimento,\r\n@@ -20,36 +21,39 @@\n     }\r\n     return response.data;\r\n \r\n   } catch (error) {\r\n-    const { status, data } = error.response || {};\r\n-    console.error('❌ Erro registerParticipante: status', status);\r\n-    \r\n-    if (data?.detail) {\r\n-      console.error('❌ Detalhes do validation error:');\r\n-      data.detail.forEach((d, i) => {\r\n-        console.error(`  [${i}] loc=${JSON.stringify(d.loc)}, msg=\"${d.msg}\"`);\r\n+    const status = error.response?.status;\r\n+    const detail = error.response?.data?.detail;\r\n+\r\n+    console.error('❌ registerParticipante falhou com status', status);\r\n+\r\n+    if (Array.isArray(detail)) {\r\n+      console.error('❌ Detalhes de validação:');\r\n+      detail.forEach((item, idx) => {\r\n+        console.error(\r\n+          `  [${idx}] campo=\"${item.loc?.[1]}\" — msg=\"${item.msg}\"`\r\n+        );\r\n       });\r\n     } else {\r\n-      console.error('❌ responseData:', data);\r\n+      console.error('❌ responseData:', error.response?.data);\r\n     }\r\n \r\n-    if (status === 422 && Array.isArray(data.detail)) {\r\n-      const fieldErrors = data.detail.reduce((acc, errItem) => {\r\n-        if (Array.isArray(errItem.loc) && errItem.loc.length >= 2) {\r\n-          const field = errItem.loc[1];\r\n-          acc[field] = errItem.msg || errItem.message || 'Erro de validação';\r\n+    // Se for 422 e detail for array, monte fieldErrors\r\n+    if (status === 422 && Array.isArray(detail)) {\r\n+      const fieldErrors = detail.reduce((errs, item) => {\r\n+        if (Array.isArray(item.loc) && item.loc.length >= 2) {\r\n+          errs[item.loc[1]] = item.msg;\r\n         }\r\n-        return acc;\r\n+        return errs;\r\n       }, {});\r\n       throw { ...error, fieldErrors };\r\n     }\r\n \r\n     throw error;\r\n   }\r\n };\r\n \r\n-\r\n // ── Busca perfil do participante autenticado ───────────────────────────────\r\n export const getParticipantePerfil = async () => {\r\n   const response = await api.get('/meu-perfil');\r\n   return response.data;\r\n"
                },
                {
                    "date": 1754568959911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   const payload = {\r\n     nome: participanteData.nome,\r\n     sobrenome: participanteData.sobrenome,       // obrigatório\r\n     email: participanteData.email,\r\n-    senha: participanteData.senha,\r\n+    senha: participanteData.senha,                // texto puro, o backend faz o hash\r\n     cpf: participanteData.cpf.replace(/\\D/g, ''),\r\n     data_nasc: participanteData.nascimento,\r\n     ocupacao_id: participanteData.ocupacao_id || 1,\r\n     necessidades_especificas: participanteData.necessidades || []\r\n@@ -29,17 +29,14 @@\n \r\n     if (Array.isArray(detail)) {\r\n       console.error('❌ Detalhes de validação:');\r\n       detail.forEach((item, idx) => {\r\n-        console.error(\r\n-          `  [${idx}] campo=\"${item.loc?.[1]}\" — msg=\"${item.msg}\"`\r\n-        );\r\n+        console.error(`  [${idx}] campo=\"${item.loc?.[1]}\" — msg=\"${item.msg}\"`);\r\n       });\r\n     } else {\r\n       console.error('❌ responseData:', error.response?.data);\r\n     }\r\n \r\n-    // Se for 422 e detail for array, monte fieldErrors\r\n     if (status === 422 && Array.isArray(detail)) {\r\n       const fieldErrors = detail.reduce((errs, item) => {\r\n         if (Array.isArray(item.loc) && item.loc.length >= 2) {\r\n           errs[item.loc[1]] = item.msg;\r\n@@ -52,21 +49,26 @@\n     throw error;\r\n   }\r\n };\r\n \r\n-// ── Busca perfil do participante autenticado ───────────────────────────────\r\n+// ── Perfil do participante autenticado (rota pública) ─────────────────────\r\n export const getParticipantePerfil = async () => {\r\n   const response = await api.get('/meu-perfil');\r\n   return response.data;\r\n };\r\n \r\n-// ── Busca um participante por ID (admin) ──────────────────────────────────\r\n+// ── Operações de participante (usuário) ────────────────────────────────────\r\n export const getParticipante = async (id) => {\r\n   const response = await api.get(`/participantes/${id}`);\r\n   return response.data;\r\n };\r\n \r\n-// ── Atualiza um participante por ID (admin) ───────────────────────────────\r\n-export const updateParticipante = async (id, data) => {\r\n-  const response = await api.patch(`/participantes/${id}`, data);\r\n+export const updateParticipante = async (id, updateData) => {\r\n+  const response = await api.patch(`/participantes/${id}`, updateData);\r\n   return response.data;\r\n };\r\n+\r\n+// ── Operações de participante (admin) ──────────────────────────────────────\r\n+export const listAllParticipantes = async () => {\r\n+  const response = await api.get('/admin/participantes');\r\n+  return response.data;\r\n+};\r\n"
                },
                {
                    "date": 1754574011273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,72 @@\n // src/services/participanteService.js\r\n import api from './api';\r\n \r\n-// ── Cadastro de participante ───────────────────────────────────────────────\r\n-export const registerParticipante = async (participanteData) => {\r\n+// ── 1. Cadastro de participante (Admin) ────────────────────────────────────\r\n+export const registerParticipante = async (data) => {\r\n+  // data deve ter: nome, sobrenome, email, senha, cpf, nascimento, ocupacao_id, necessidades\r\n   const payload = {\r\n-    nome: participanteData.nome,\r\n-    sobrenome: participanteData.sobrenome,       // obrigatório\r\n-    email: participanteData.email,\r\n-    senha: participanteData.senha,                // texto puro, o backend faz o hash\r\n-    cpf: participanteData.cpf.replace(/\\D/g, ''),\r\n-    data_nasc: participanteData.nascimento,\r\n-    ocupacao_id: participanteData.ocupacao_id || 1,\r\n-    necessidades_especificas: participanteData.necessidades || []\r\n+    nome: data.nome,\r\n+    sobrenome: data.sobrenome,\r\n+    email: data.email,\r\n+    senha: data.senha,\r\n+    cpf: data.cpf.replace(/\\D/g, ''),\r\n+    data_nasc: data.nascimento,\r\n+    ocupacao_id: data.ocupacao_id || 1,\r\n+    necessidades_especificas: data.necessidades || []\r\n   };\r\n \r\n   try {\r\n-    const response = await api.post('/admin/participantes/cadastro', payload);\r\n-    if (response.data.access_token) {\r\n-      localStorage.setItem('access_token', response.data.access_token);\r\n+    const res = await api.post('/admin/participantes/cadastro', payload);\r\n+    // opcional: se o backend retornar token na criação\r\n+    if (res.data.access_token) {\r\n+      localStorage.setItem('access_token', res.data.access_token);\r\n     }\r\n-    return response.data;\r\n+    return res.data;\r\n \r\n-  } catch (error) {\r\n-    const status = error.response?.status;\r\n-    const detail = error.response?.data?.detail;\r\n+  } catch (err) {\r\n+    const status = err.response?.status;\r\n+    const detail = err.response?.data?.detail;\r\n \r\n-    console.error('❌ registerParticipante falhou com status', status);\r\n-\r\n+    console.error('❌ registerParticipante falhou:', status, err.response?.data);\r\n     if (Array.isArray(detail)) {\r\n-      console.error('❌ Detalhes de validação:');\r\n-      detail.forEach((item, idx) => {\r\n-        console.error(`  [${idx}] campo=\"${item.loc?.[1]}\" — msg=\"${item.msg}\"`);\r\n-      });\r\n-    } else {\r\n-      console.error('❌ responseData:', error.response?.data);\r\n+      detail.forEach((item, i) =>\r\n+        console.error(`  [${i}] campo=\"${item.loc?.[1]}\" — msg=\"${item.msg}\"`)\r\n+      );\r\n     }\r\n-\r\n     if (status === 422 && Array.isArray(detail)) {\r\n-      const fieldErrors = detail.reduce((errs, item) => {\r\n+      const fieldErrors = detail.reduce((acc, item) => {\r\n         if (Array.isArray(item.loc) && item.loc.length >= 2) {\r\n-          errs[item.loc[1]] = item.msg;\r\n+          acc[item.loc[1]] = item.msg;\r\n         }\r\n-        return errs;\r\n+        return acc;\r\n       }, {});\r\n-      throw { ...error, fieldErrors };\r\n+      throw { ...err, fieldErrors };\r\n     }\r\n-\r\n-    throw error;\r\n+    throw err;\r\n   }\r\n };\r\n \r\n-// ── Perfil do participante autenticado (rota pública) ─────────────────────\r\n-export const getParticipantePerfil = async () => {\r\n-  const response = await api.get('/meu-perfil');\r\n-  return response.data;\r\n-};\r\n+// ── 2. Perfil do participante autenticado (Usuário) ────────────────────────\r\n+export const getParticipantePerfil = () =>\r\n+  api.get('/meu-perfil').then(res => res.data);\r\n \r\n-// ── Operações de participante (usuário) ────────────────────────────────────\r\n-export const getParticipante = async (id) => {\r\n-  const response = await api.get(`/participantes/${id}`);\r\n-  return response.data;\r\n-};\r\n+// ── 3. Endpoints Admin para Participantes ──────────────────────────────────\r\n \r\n-export const updateParticipante = async (id, updateData) => {\r\n-  const response = await api.patch(`/participantes/${id}`, updateData);\r\n-  return response.data;\r\n-};\r\n+// 3.1 Listar (com paginação)\r\n+export const listParticipantesAdmin = (page = 1, size = 20) =>\r\n+  api\r\n+    .get('/admin/participantes/listar', { params: { page, size } })\r\n+    .then(res => res.data);\r\n \r\n-// ── Operações de participante (admin) ──────────────────────────────────────\r\n-export const listAllParticipantes = async () => {\r\n-  const response = await api.get('/admin/participantes');\r\n-  return response.data;\r\n-};\r\n+// 3.2 Detalhar participante por ID\r\n+export const getParticipanteAdmin = (id) =>\r\n+  api.get(`/admin/participantes/${id}`).then(res => res.data);\r\n+\r\n+// 3.3 Deletar participante\r\n+export const deleteParticipanteAdmin = (id) =>\r\n+  api.delete(`/admin/participantes/deletar/${id}`).then(res => res.data);\r\n+\r\n+// NOTA: não há rota de PATCH/PUT em AdminParticipantesRouter,\r\n+// então removemos o updateParticipante ou só o usamos para outro endpoint,\r\n+// se você adicioná-lo no backend.\r\n+\r\n"
                }
            ],
            "date": 1754530426177,
            "name": "Commit-0",
            "content": "// src/services/participanteService.js\r\nimport api from './api';\r\n\r\nexport const registerParticipante = async (participanteData) => {\r\n  // Monta o payload conforme o backend espera\r\n  const payload = {\r\n    nome: participanteData.nome,\r\n    email: participanteData.email,\r\n    senha: participanteData.senha,\r\n    cpf: participanteData.cpf.replace(/\\D/g, ''),\r\n    data_nasc: participanteData.nascimento,\r\n    ocupacao_id: participanteData.ocupacao_id || 1,\r\n    necessidades_especificas: participanteData.necessidades || []\r\n  };\r\n\r\n  try {\r\n    // Dispara o request\r\n    const response = await api.post('/admin/participantes/cadastro', payload);\r\n\r\n    // Se vier token, armazena\r\n    if (response.data.access_token) {\r\n      localStorage.setItem('access_token', response.data.access_token);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    // Log completo do erro e do corpo retornado pelo backend\r\n    console.error('❌ Erro no serviço registerParticipante:', {\r\n      status: error.response?.status,\r\n      message: error.message,\r\n      responseData: error.response?.data\r\n    });\r\n\r\n    // Se for erro de validação (422), extrai os field errors\r\n    if (error.response?.status === 422) {\r\n      const detail = Array.isArray(error.response.data.detail)\r\n        ? error.response.data.detail\r\n        : [];\r\n\r\n      // Mapeia cada erro para { field, message }\r\n      const fieldErrors = detail.map(err => ({\r\n        field:   err.loc[1],  // por ex. [\"body\",\"email\"] → \"email\"\r\n        message: err.msg\r\n      }));\r\n\r\n      // Lança novamente incluindo fieldErrors, para o componente capturar\r\n      throw { ...error, fieldErrors };\r\n    }\r\n\r\n    // Para outros erros, apenas relança\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para buscar o perfil do participante autenticado\r\nexport const getParticipantePerfil = async () => {\r\n  const response = await api.get('/meu-perfil');\r\n  return response.data;\r\n};\r\n\r\n// Outras funções do serviço (retornando sempre response.data)\r\nexport const getParticipante = id =>\r\n  api.get(`/participantes/${id}`).then(res => res.data);\r\n\r\nexport const updateParticipante = (id, data) =>\r\n  api.patch(`/participantes/${id}`, data).then(res => res.data);\r\n"
        }
    ]
}