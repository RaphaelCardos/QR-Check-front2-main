"""Recriando tabelas em uma só migration

Revision ID: 0a50ce8d8fc8
Revises: 
Create Date: 2025-05-26 21:55:25.393564

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0a50ce8d8fc8'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Criação da sequência id_public_seq
    op.execute("""
    CREATE SEQUENCE IF NOT EXISTS public.id_public_seq
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        CACHE 1;
    """)


    op.create_table('administradores',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('senha', sa.VARCHAR(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('data_criacao', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('eventos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_public', sa.UUID(), nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('categoria', sa.String(), nullable=False),
    sa.Column('subcategoria', sa.String(), nullable=False),
    sa.Column('descricao', sa.String(), nullable=False),
    sa.Column('data_inicio', sa.Date(), nullable=False),
    sa.Column('data_fim', sa.Date(), nullable=False),
    sa.Column('inscricoes_abertas', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_public')
    )
    op.create_table('necessidades_especificas',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('is_custom', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nome')
    )
    op.create_table('ocupacoes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('is_custom', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('enderecos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('cep', sa.Integer(), nullable=False),
    sa.Column('rua', sa.String(), nullable=False),
    sa.Column('numero', sa.Integer(), nullable=False),
    sa.Column('complemento', sa.String(), nullable=False),
    sa.Column('bairro', sa.String(), nullable=False),
    sa.Column('cidade', sa.String(), nullable=False),
    sa.Column('estado', sa.String(), nullable=False),
    sa.Column('evento_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['evento_id'], ['eventos.id_public'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('evento_id')
    )
    op.create_table('espacos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('descricao', sa.String(), nullable=False),
    sa.Column('capacidade', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['evento_id'], ['eventos.id_public'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('participantes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_public', sa.UUID(), nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('sobrenome', sa.String(), nullable=False),
    sa.Column('cpf', sa.VARCHAR(length=11), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('senha', sa.VARCHAR(), nullable=False),
    sa.Column('data_nasc', sa.Date(), nullable=False),
    sa.Column('ocupacao_id', sa.Integer(), nullable=False),
    sa.Column('data_criacao', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['ocupacao_id'], ['ocupacoes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cpf'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('id_public')
    )
    op.create_table('assoc_participante_evento',
    sa.Column('participante_id', sa.Integer(), nullable=False),
    sa.Column('evento_id', sa.Integer(), nullable=False),
    sa.Column('data_inscricao', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['evento_id'], ['eventos.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participante_id'], ['participantes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('participante_id', 'evento_id')
    )
    op.create_table('assoc_participante_necessidade',
    sa.Column('participante_id', sa.Integer(), nullable=False),
    sa.Column('necessidade_especifica_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['necessidade_especifica_id'], ['necessidades_especificas.id'], ),
    sa.ForeignKeyConstraint(['participante_id'], ['participantes.id'], ),
    sa.PrimaryKeyConstraint('participante_id', 'necessidade_especifica_id')
    )
    op.create_table('recursos',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.String(), nullable=False),
    sa.Column('quantidade', sa.Integer(), nullable=False),
    sa.Column('espaco_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['espaco_id'], ['espacos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('recursos')
    op.drop_table('assoc_participante_necessidade')
    op.drop_table('assoc_participante_evento')
    op.drop_table('participantes')
    op.drop_table('espacos')
    op.drop_table('enderecos')
    op.drop_table('ocupacoes')
    op.drop_table('necessidades_especificas')
    op.drop_table('eventos')
    op.drop_table('administradores')

    # Remover a sequência id_public_seq
    op.execute("""DROP SEQUENCE IF EXISTS public.id_public_seq;""")

    # ### end Alembic commands ###
